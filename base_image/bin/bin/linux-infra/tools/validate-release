#!/bin/bash 

#  This script validates a SOCFPGA Linux build, that is, it checks that the following
#! files have been generated by Yocto:
#!  - uImage, uBoot
#!  - file system images: ext3, cpio, tar, jffs2
#!
#! The output of the script goes to stdout, and can be redirected to whatever file/log

# Internals
SELF=`basename $0`
# Constants
PATH_TO_IMAGES=tmp/deploy/images

# Variables


#  function to print the help text for this script
#! no arguments
function usage() {
    cat <<EOT
        Usage: ${SELF} [-h] -b builddir
          -h           : prints this (lovely) message.
        Note:
          it is assumed that this script runs from the images directory
EOT
    return
}

#! This function will collect all the files found in the PATH_TO_IMAGES
#! and will check that 
#!  the list will match what we expect
#!  the files are of the right type
#!
#! It is assumed that the current directory contains the images

function check_build() {
    local first=1
    local errors=0
    local files_found=$(find [A-z0-9]* -type l)

    for file in  ${EXPECTED_IMAGES} ; do
       # current file
       echo "${SELF}: ${FUNCNAME}: info: checking ${file}"

       # check if the file makes sense
       if [ ! -e ${file} ] ; then
           echo "${SELF}: ${FUNCNAME}: error: ${file} does not exist" 
           errors=$((${errors}+1))
           continue
       fi

       # is the file empty?
       if [ ! -s ${file} ] ; then
           echo "${SELF}: ${FUNCNAME}: error: file ${file} is empty"
           errors=$((${errors}+1))
       fi
       
       # remove the file from the list of found files
       files_found=$(echo ${files_found}|sed -e's/'${file}'//') 
    done 

    if [ ${errors} -ne 0 ] ; then
        echo "${SELF}: ${FUNCNAME}: ${errors} errors were found with this build!"
    else
        echo "${SELF}: ${FUNCNAME}: build matches expectations"
    fi
    
    if [ -z "${files_found}" ] ; then
        files_found=none
    fi 
    echo "${SELF}: ${FUNCNAME}: info: files existing but not mandatory: ${files_found}"

    return ${errors}
}

# Here we parse options
while [ $# -gt 0 ] ; do
    case $1 in
	-h) usage ; exit 0 ;;
	-v) PROCESSOR="socfpga_vt" ;;
        *)  echo "${SELF}: error: unknown option" ; usage ; exit ;;
    esac
    shift
done

EXPECTED_IMAGES="zImage \
vmlinux \
sd_image_arria5.bin.gz \
sd_image_cyclone5.bin.gz \
socfpga_vt.dtb \
socfpga_arria5.dtb \
socfpga_cyclone5.dtb \
u-boot-socfpga_cyclone5.bin \
u-boot-socfpga_cyclone5.img \
u-boot-socfpga_arria5.bin \
u-boot-socfpga_arria5.img \
u-boot-spl-socfpga_cyclone5.bin \
u-boot-spl-socfpga_cyclone5.img \
u-boot-spl-socfpga_arria5.bin \
u-boot-spl-socfpga_arria5.img \
altera-image.cpio \
altera-image.ext3 \
altera-image.tar.gz \
altera-image.jffs2" 

check_build
exit $?

